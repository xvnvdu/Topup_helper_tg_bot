import math
import time
from aiogram import Bot
from datetime import datetime
from aiogram.fsm.context import FSMContext
from aiogram.handlers import CallbackQueryHandler

from crypto.main_crypto import CryptoPayments, ok_to_withdraw, ok_to_fund
from crypto.fund_wallet import wallet_funding_confirmed, wallet_funding_declined
from crypto.withdraw_wallet import try_another_address, withdrawal_confirmed, withdrawal_declined
from crypto.wallet_page_maker import main_page, polygon_mainnet, arbitrum_mainnet, optimism_mainnet, base_mainnet

from . import payments
from .send_to_user import send_to_user
from .transactions_log import sorted_payments
from .main_bot import (users_data_dict, CustomPaymentState, SendToFriend, pending_sending_amount, 
                       pending_sending_id, pending_sending_message, pending_payments, pending_payments_info)
from .bot_buttons import (menu_keyboard, account_keyboard, payment_keyboard, crypto_keyboard, 
                         stars_keyboard, yk_payment_keyboard, zero_transactions_keyboard, skip_message_keyboard,
                         log_buttons, send_keyboard, step_back_keyboard, confirm_sending_keyboard, chains_keyboard)



async def main_callbacks(call: CallbackQueryHandler, bot: Bot, state: FSMContext):
    user_id = call.from_user.id
    user_data = users_data_dict[user_id]

    phone = int(user_data['Phone']) // 10**4
    balance = user_data['Balance']
    registration_date = user_data['Registration']
    volume = user_data['Funding_volume']

    days_count = (datetime.now() - datetime.strptime(registration_date, '%d.%m.%Y')).days
    if days_count % 10 == 1 and days_count % 100 != 11:
        days = '–¥–µ–Ω—å'
    elif days_count % 10 in [2, 3, 4] and not (11 <= days_count % 100 <= 19):
        days = '–¥–Ω—è'
    else:
        days = '–¥–Ω–µ–π'

    current_page = await state.get_data()
    current_page = current_page.get('current_page', 0)
    trx_log = await sorted_payments(call)
    total_pages = math.ceil((len(trx_log)-1) / 15)
    first_page_line = current_page * 15
    last_page_line = first_page_line + 15
    page_text = '\n'.join(trx_log[first_page_line:last_page_line])

    if call.data == 'account':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –∞–∫–∫–∞—É–Ω—Ç')
        await call.message.edit_text(f'<strong>–ú–æ–π –∞–∫–∫–∞—É–Ω—Ç</strong>\n\n'
                                     f'‚öôÔ∏è <strong>ID:</strong> <code>{call.from_user.id}</code>\n'
                                     f'üîí <strong>–¢–µ–ª–µ—Ñ–æ–Ω:</strong> <code>{phone}****</code>\n'
                                     f'üóì <strong>–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è:</strong> <code>{registration_date} ({days_count} {days})</code>\n\n'
                                     f'üíµ <strong>–ú–æ–π –±–∞–ª–∞–Ω—Å: </strong><code>{balance}‚ÇΩ</code>\n'
                                     f'üíé <strong>–ú–æ–π –æ–±—ä–µ–º –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–π: </strong><code>{volume}‚ÇΩ</code>',
                                     parse_mode='HTML', reply_markup=account_keyboard)
    elif call.data == 'transactions':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')
        if users_data_dict[user_id]['Balance'] == 0:
            await call.message.edit_text('<strong>üíî –í—ã –µ—â–µ –Ω–µ —Å–æ–≤–µ—Ä—à–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏.</strong>',
                                         parse_mode='HTML', reply_markup=zero_transactions_keyboard)
        else:
            current_page = 0
            await state.update_data(current_page=current_page)
            await log_buttons(call, page_text, current_page, total_pages)
    elif call.data == 'next_page':
        current_page += 1
        await state.update_data(current_page=current_page)
        first_page_line = current_page * 15
        last_page_line = first_page_line + 15
        page_text = '\n'.join(trx_log[first_page_line:last_page_line])
        await log_buttons(call, page_text, current_page, total_pages)
    elif call.data == 'prev_page':
        current_page -= 1
        await state.update_data(current_page=current_page)
        first_page_line = current_page * 15
        last_page_line = first_page_line + 15
        page_text = '\n'.join(trx_log[first_page_line:last_page_line])
        await log_buttons(call, page_text, current_page, total_pages)
    elif call.data == 'send':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –ø–µ—Ä–µ–≤–æ–¥ –±–∞–ª–∞–Ω—Å–∞')
        await call.message.edit_text('üéÅ –í —ç—Ç–æ–º —Ä–∞–∑–¥–µ–ª–µ —Ç—ã –º–æ–∂–µ—à—å <strong>–æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–µ–Ω—å–≥–∏</strong> —Å–æ —Å–≤–æ–µ–≥–æ '
                                     '–±–∞–ª–∞–Ω—Å–∞ –¥—Ä—É–≥—É, –Ω–∞ —Å–≤–æ–π –≤—Ç–æ—Ä–æ–π –∞–∫–∫–∞—É–Ω—Ç –∏–ª–∏ –ª—é–±–æ–º—É –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, '
                                     '–∫–æ—Ç–æ—Ä—ã–π <strong>—É–∂–µ –ø–æ–ª—å–∑—É–µ—Ç—Å—è –±–æ—Ç–æ–º!</strong>\n\n<i>–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è '
                                     '–æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∏–∂–µ:</i>', parse_mode='HTML', reply_markup=send_keyboard)
        await state.set_state(SendToFriend.amount_input)
    elif call.data == 'choose_id':
        await call.message.edit_text('<strong>üë§ –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞.</strong>\n\n<i>–í–∞–º –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ '
                                 'ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∏—Å–ª–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∏–∂–µ:</i>', parse_mode='HTML', reply_markup=step_back_keyboard)
        await state.set_state(SendToFriend.id_input)
    elif call.data == 'message_input':
        await state.set_state(SendToFriend.message_input)
        await call.message.edit_text(f'üì© <strong>–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.'
                                     f'</strong>\n<i>–û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–µ–Ω–∏–µ, —á—Ç–æ –ª—é–±—ã–µ –ø—Ä–µ–º–∏—É–º-—ç–º–æ–¥–∑–∏, –∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é, –±—É–¥—É—Ç '
                                     f'–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω—ã –≤ –æ–±—ã—á–Ω—ã–µ.</i>\n\n<i>–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∏–∂–µ:</i>',
                                     parse_mode='HTML', reply_markup=skip_message_keyboard)
    elif call.data == 'confirm_sending':
        await state.clear()
        pending_sending_message[user_id] = None
        await call.message.answer(f'<strong>–í—ã –ø–µ—Ä–µ–≤–æ–¥–∏—Ç–µ: <code>{pending_sending_amount[user_id]}‚ÇΩ</code>\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é '
                             f'–ø–æ–¥ ID: <code>{pending_sending_id[user_id]}</code>\n\n–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ?</strong>',
                             parse_mode='HTML', reply_markup=confirm_sending_keyboard)
    elif call.data == 'sending_confirmed':
        await send_to_user(call, bot, state)
        await call.message.edit_text('<strong>üéÅ –ü–µ—Ä–µ–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!</strong>\n\n<i>–ü–æ–ª—É—á–∞—Ç–µ–ª—é –ø—Ä–∏–¥–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å '
                                     '—Å—É–º–º–æ–π –ø–µ—Ä–µ–≤–æ–¥–∞, –≤–∞—à–∏–º ID –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ–º, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏.</i>', parse_mode='HTML', reply_markup=send_keyboard)
    elif call.data == 'topup':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ')
        await call.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–± –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞:</strong>',
                                     parse_mode='HTML', reply_markup=payment_keyboard)
    elif call.data == 'crypto':
        start = time.perf_counter()
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –≤—ã–≤–æ–¥')
        await call.message.edit_text('üåê <strong>–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–ª–æ–∫—á–µ–π–Ω—É.</strong>\n'
                                     '<i>–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...</i>', parse_mode='HTML')
        text = await main_page(call)
        await call.message.edit_text(text, parse_mode='HTML', reply_markup=crypto_keyboard,
                                     disable_web_page_preview=True)
        end = time.perf_counter()
        print(f'{end - start:.2f}')
    elif call.data == 'Polygon':
        await state.clear()
        text = await polygon_mainnet(call)
        await call.message.edit_text(text, parse_mode='HTML', reply_markup=chains_keyboard('Polygon'),
                                     disable_web_page_preview=True)
    elif call.data == 'Arbitrum':
        await state.clear()
        text = await arbitrum_mainnet(call)
        await call.message.edit_text(text, parse_mode='HTML', reply_markup=chains_keyboard('Arbitrum'),
                                     disable_web_page_preview=True)
    elif call.data == 'Optimism':
        await state.clear()
        text = await optimism_mainnet(call)
        await call.message.edit_text(text, parse_mode='HTML', reply_markup=chains_keyboard('Optimism'),
                                     disable_web_page_preview=True)
    elif call.data == 'Base':
        await state.clear()
        text = await base_mainnet(call)
        await call.message.edit_text(text, parse_mode='HTML', reply_markup=chains_keyboard('Base'),
                                     disable_web_page_preview=True)
    elif call.data == 'confirm_funding':
        await call.message.edit_text('üïì <strong>–û–∂–∏–¥–∞–Ω–∏–µ...</strong>', parse_mode='HTML')
        if ok_to_fund[user_id]:
            await wallet_funding_confirmed(call)
        else:
            await wallet_funding_declined(call)
    elif call.data == 'change_withdraw_address':
        await state.set_state(CryptoPayments.address_withdraw_to)
        await try_another_address(call)
    elif call.data == 'withdrawal_confirmed':
        await call.message.edit_text('üïì <strong>–û–∂–∏–¥–∞–Ω–∏–µ...</strong>', parse_mode='HTML')
        if ok_to_withdraw[user_id]:
            await withdrawal_confirmed(call)
        else:
            await withdrawal_declined(call)
    elif call.data == 'back':
        await call.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ:</strong>',
                                     parse_mode='HTML', reply_markup=menu_keyboard)
    elif call.data == 'YK':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ yk')
        if user_id in pending_payments:
            del pending_payments[user_id]
            del pending_payments_info[user_id]
        await call.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é:</strong>\n'
                                     '<i>–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ÆKassa ‚Äî 60‚ÇΩ</i>\n\n'
                                     '<i>‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –Ω–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa'
                                     ' –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –≤ —Ç–µ—Å—Ç–æ–≤–æ–º —Ä–µ–∂–∏–º–µ, –ª—é–±—ã–µ –¥–µ–ø–æ–∑–∏—Ç—ã –¥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
                                     ' –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –±—É–¥—É—Ç –æ–±–Ω—É–ª–µ–Ω—ã!</i>',
                                     parse_mode='HTML', reply_markup=yk_payment_keyboard)
        await state.set_state(CustomPaymentState.waiting_for_custom_rub_amount)
    elif call.data == 'stars':
        print(f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–æ—à–µ–ª –≤ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ stars')
        if user_id in pending_payments:
            del pending_payments[user_id], pending_payments_info[user_id]
        await call.message.edit_text('<strong>–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –µ–µ –≤—Ä—É—á–Ω—É—é:</strong>',
                                     parse_mode='HTML', reply_markup=stars_keyboard)
        await state.set_state(CustomPaymentState.waiting_for_custom_stars_amount)
    elif call.data == '100_in_stars':
        await payments.stars_63(call, bot)
    elif call.data == '200_in_stars':
        await payments.stars_125(call, bot)
    elif call.data == '400_in_stars':
        await payments.stars_250(call, bot)
    elif call.data == '500_in_stars':
        await payments.stars_313(call, bot)
    elif call.data == '100_in_rub':
        await payments.rub_100(call, bot)
    elif call.data == '200_in_rub':
        await payments.rub_200(call, bot)
    elif call.data == '400_in_rub':
        await payments.rub_400(call, bot)
    elif call.data == '500_in_rub':
        await payments.rub_500(call, bot)
        